type Auction @entity {
  id: ID! #id is a required field
  blockNum: Int!
  status: String! 
  bids: [Bid]! @derivedFrom(field: "auction")
  # winningBids: [WinningBid]! @derivedFrom(field: "auction")
  leaseStart: Int
  slotsStart: Int!
  leaseEnd: Int
  slotsEnd: Int!
  closingStart: Int!
  closingEnd: Int!
  resultBlock: Int
  ongoing: Boolean! 
  parachainLeases: [ParachainLeases] @derivedFrom(field: "auction")
  createdAt:  DateTime!
}

type Parachain @entity {
  id: ID!
  paraId: Int!
  createdAt: DateTime!
  creationBlock: Int
  deregistered: Boolean!
  deposit: BigInt!
  manager: String!
  leases: [ParachainLeases] @derivedFrom(field: "parachain")
  bids: [Bid] @derivedFrom(field: "parachain")
  funds: [Crowdloan] @derivedFrom(field: "parachain")
  activeFund: Crowdloan
  latestBid: Bid
  chronicle: Chronicle
}

type Crowdloan @entity {
  id: ID! # generated fund address
  parachain: Parachain!
  paraId: String!
  tokenId: String!
  depositor: String!
  verifier: String
  cap: BigInt!
  raised: BigInt! 
  lockExpiredBlock: Int!
  blockNum: Int
  firstSlot: Int!
  lastSlot: Int!
  status: String! 
  leaseExpiredBlock: Int
  dissolvedBlock: Int
  updatedAt: DateTime
  createdAt: DateTime!
  isFinished: Boolean 
  wonAuctionId: String  
  contributions: [Contribution] @derivedFrom(field: "fund")
}

type AuctionParachain @entity {
  id: ID!
  auction: Auction!
  parachain: Parachain!
  blockNum: Int!
  createdAt: DateTime!
  firstSlot: Int!
  lastSlot: Int!
}

type ParachainLeases @entity {
  id: ID! # paraId-leaseRange-auction
  paraId: Int!
  parachain: Parachain! 
  leaseRange: String!  #auctionId-start-end
  firstLease: Int!
  lastLease: Int!
  latestBidAmount: BigInt!
  auction: Auction 
  activeForAuction: String  #auctionId
  winningAmount: BigInt
  extraAmount: BigInt
  wonBidFrom: String
  numBlockWon: Int
  winningResultBlock: Int
  hasWon: Boolean! 
}

type Bid @entity {
  id: ID!
  auction: Auction!
  winningAuction: Int  # auctionId
  blockNum: Int! 
  parachain: Parachain!
  isCrowdloan: Boolean!
  amount: BigInt!
  fund: Crowdloan
  firstSlot: Int!
  lastSlot: Int!
  bidder: String
  createdAt: DateTime!
}

type Contribution @entity {
  id: ID!
  crowdloanId: String!
  account: String! 
  parachain: Parachain!
  fund: Crowdloan!
  amount: BigInt! 
  blockNum: Int! 
  createdAt: DateTime!
}

type Chronicle @entity {
  id: ID! # Static 'CHRONICLE_KEY'
  curAuction: Auction
  curAuctionId: String
  curBlockNum: Int
  curLease: Int
  curLeaseStart: Int
  curLeaseEnd: Int
  parachains: [Parachain] @derivedFrom(field: "chronicle")
}

type CrowdloanSequence @entity {
  id: ID!
  curIndex: Int!
  createdAt: DateTime!
  blockNum: Int!
}

type Token @entity {
    id: ID!
    tokenName: String!
}

type Chain @entity {
    id: ID!
    tokenId: String!
    chainName: String!
    relayId: String
    relayChain: String
}

type Balance @entity {
    id: ID! # AccountID + ChainID
    chainId: Chain! 
    accountId: Account!
    tokenId: Token!
    timestamp: DateTime!
    freeBalance: BigInt
    bondedBalance: BigInt
    vestedBalance: BigInt
}

type Transfer @entity {
    id: ID!
    senderAccount: String!
    receiverAccount: String!
    tokenId: String!
    amount: BigInt!
    timestamp: DateTime!
}

type Account @entity {
    id: ID!
    balance: BigInt!
}